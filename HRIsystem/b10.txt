# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[-0.243091, [3, -0.693333, 0], [3, 0.186667, 0]], [-0.243091, [3, -0.186667, 0], [3, 0.2, 0]], [-0.243091, [3, -0.2, 0], [3, 0.186667, 0]], [-0.243091, [3, -0.186667, 0], [3, 0.266667, 0]], [-0.388097, [3, -0.266667, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.0142115, [3, -0.693333, 0], [3, 0.186667, 0]], [0.0142115, [3, -0.186667, 0], [3, 0.2, 0]], [0.0142115, [3, -0.2, 0], [3, 0.186667, 0]], [0.0142115, [3, -0.186667, 0], [3, 0.266667, 0]], [0.0153399, [3, -0.266667, 0], [3, 0, 0]]])

names.append("HipPitch")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[-0.409545, [3, -0.693333, 0], [3, 0.186667, 0]], [-0.409545, [3, -0.186667, 0], [3, 0.2, 0]], [-0.409545, [3, -0.2, 0], [3, 0.186667, 0]], [-0.409545, [3, -0.186667, 0], [3, 0.266667, 0]], [-0.0168738, [3, -0.266667, 0], [3, 0, 0]]])

names.append("HipRoll")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[-0.0079576, [3, -0.693333, 0], [3, 0.186667, 0]], [-0.0079576, [3, -0.186667, 0], [3, 0.2, 0]], [-0.0079576, [3, -0.2, 0], [3, 0.186667, 0]], [-0.0079576, [3, -0.186667, 0], [3, 0.266667, 0]], [-0.0122719, [3, -0.266667, 0], [3, 0, 0]]])

names.append("KneePitch")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.141291, [3, -0.693333, 0], [3, 0.186667, 0]], [0.141291, [3, -0.186667, 0], [3, 0.2, 0]], [0.141291, [3, -0.2, 0], [3, 0.186667, 0]], [0.141291, [3, -0.186667, 0], [3, 0.266667, 0]], [0.0245438, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[-0.302008, [3, -0.693333, 0], [3, 0.186667, 0]], [-0.302008, [3, -0.186667, 0], [3, 0.2, 0]], [-0.302008, [3, -0.2, 0], [3, 0.186667, 0]], [-0.302008, [3, -0.186667, 0], [3, 0.266667, 0]], [-0.118117, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[-1.71307, [3, -0.693333, 0], [3, 0.186667, 0]], [-1.71307, [3, -0.186667, 0], [3, 0.2, 0]], [-1.71307, [3, -0.2, 0], [3, 0.186667, 0]], [-1.71307, [3, -0.186667, 0], [3, 0.266667, 0]], [-1.71346, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.968944, [3, -0.693333, 0], [3, 0.186667, 0]], [0.968944, [3, -0.186667, 0], [3, 0.2, 0]], [0.968944, [3, -0.2, 0], [3, 0.186667, 0]], [0.968944, [3, -0.186667, 0], [3, 0.266667, 0]], [0.668717, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[1.22886, [3, -0.693333, 0], [3, 0.186667, 0]], [1.22886, [3, -0.186667, 0], [3, 0.2, 0]], [1.22886, [3, -0.2, 0], [3, 0.186667, 0]], [1.22886, [3, -0.186667, 0], [3, 0.266667, 0]], [1.76868, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.0936886, [3, -0.693333, 0], [3, 0.186667, 0]], [0.0936886, [3, -0.186667, 0], [3, 0.2, 0]], [0.0936886, [3, -0.2, 0], [3, 0.186667, 0]], [0.0936886, [3, -0.186667, 0], [3, 0.266667, 0]], [0.0736311, [3, -0.266667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.0717194, [3, -0.693333, 0], [3, 0.186667, 0]], [0.0717194, [3, -0.186667, 0], [3, 0.2, 0]], [0.0717194, [3, -0.2, 0], [3, 0.186667, 0]], [0.0717194, [3, -0.186667, 0], [3, 0.266667, 0]], [0.053648, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[1.41529, [3, -0.693333, 0], [3, 0.186667, 0]], [1.08909, [3, -0.186667, 0], [3, 0.2, 0]], [1.41529, [3, -0.2, 0], [3, 0.186667, 0]], [1.08909, [3, -0.186667, 0.179097], [3, 0.266667, -0.255852]], [0.110447, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[1.08655, [3, -0.693333, 0], [3, 0.186667, 0]], [1.08655, [3, -0.186667, 0], [3, 0.2, 0]], [1.08655, [3, -0.2, 0], [3, 0.186667, 0]], [1.08655, [3, -0.186667, 0], [3, 0.266667, 0]], [1.69045, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.973469, [3, -0.693333, 0], [3, 0.186667, 0]], [0.973469, [3, -0.186667, 0], [3, 0.2, 0]], [0.973469, [3, -0.2, 0], [3, 0.186667, 0]], [0.973469, [3, -0.186667, 0], [3, 0.266667, 0]], [0.670475, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.674023, [3, -0.693333, 0], [3, 0.186667, 0]], [0.674023, [3, -0.186667, 0], [3, 0.2, 0]], [0.674023, [3, -0.2, 0], [3, 0.186667, 0]], [0.674023, [3, -0.186667, 0], [3, 0.266667, 0]], [1.73186, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[-0.128421, [3, -0.693333, 0], [3, 0.186667, 0]], [-0.128421, [3, -0.186667, 0], [3, 0.2, 0]], [-0.128421, [3, -0.2, 0], [3, 0.186667, 0]], [-0.128421, [3, -0.186667, 0], [3, 0.266667, 0]], [-0.0736311, [3, -0.266667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([2.08, 2.64, 3.24, 3.8, 4.6])
keys.append([[0.280495, [3, -0.693333, 0], [3, 0.186667, 0]], [0.280495, [3, -0.186667, 0], [3, 0.2, 0]], [0.280495, [3, -0.2, 0], [3, 0.186667, 0]], [0.280495, [3, -0.186667, 0], [3, 0.266667, 0]], [-0.0399261, [3, -0.266667, 0], [3, 0, 0]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  # motion = ALProxy("ALMotion", IP, 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err
